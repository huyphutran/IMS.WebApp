<div class="form-group">
    <label for="search">@Label</label>
    <input type="text" 
            class="form-control"
            @bind-value="userInput"
            @bind-value:event="oninput"
            @onkeyup="OnPressKey" />
</div>

@if(searchResult != null && searchResult.Count > 0)
{
    <div class="search-result">
        <ul>
            @{
                int itemIndex = 0;
                foreach (var item in searchResult)
                {   
                    <li @key="@item.Id"
                        class="@(itemIndex == currentItemIndex? "selected":"")"
                        @onclick="@(() => OnSeletedItem(item))"
                        >
                        @item.Name
                    </li>
                    itemIndex++;
                }
            }
        </ul>
    </div>    
}

@code {

    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public Func<string, Task<List<ItemViewModel>>>? SearchFunction { get;set; }
    [Parameter]
    public EventCallback<ItemViewModel> OnItemSeleted { get; set; }
    private List<ItemViewModel>? searchResult = null;
    private ItemViewModel? seletedItem = null;
    private ItemViewModel? currentItem = null;
    private int currentItemIndex = -1;

    private string _userInput = string.Empty; 
    public string  userInput 
    {   get => _userInput; 
        set
        {
            _userInput = value;
            if(!string.IsNullOrWhiteSpace(_userInput) && SearchFunction != null)
            {
                if(this.seletedItem?.Name != _userInput)
                {
                    ViewItemAsync();
                }
            }
            else
            {

                ClearCurrentItem();

            }
        }
    }

    private async Task ViewItemAsync()
    {
        if (SearchFunction != null)
        {
            searchResult = await SearchFunction(_userInput);
            this.seletedItem = null;
            StateHasChanged();
        }
    }

    public void ClearCurrentItem()
    {
        searchResult = null;
        currentItem = null;
        currentItemIndex = -1;
    }

    private void OnSeletedItem(ItemViewModel? item)
    {
        ClearCurrentItem();
        if (item != null)
        {
            this.seletedItem = item;
            this.userInput = item.Name;
            OnItemSeleted.InvokeAsync(item);
        }
        
    }

    public void OnPressKey(KeyboardEventArgs e)
    {
        if((e.Code == "ArrowDown" || e.Code == "ArrowUp") && searchResult != null && searchResult.Count >0)
        {
            if (e.Code == "ArrowDown" && currentItemIndex < searchResult.Count - 1)
            {
                currentItem = searchResult[++currentItemIndex];

            }
            else if (e.Code == "ArrowUp")
            {
                if(currentItemIndex >0)
                    currentItem = searchResult[--currentItemIndex];
                else
                {
                    currentItem = null;
                    currentItemIndex = -1;
                }
            }
        }
        else if (e.Code == "Enter" || e.Code == "NumberPad")
        {
            OnSeletedItem(currentItem);
        }
    }

    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

}
