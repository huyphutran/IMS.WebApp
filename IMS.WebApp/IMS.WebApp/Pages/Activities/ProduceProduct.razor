@page "/produce"
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent;
@inject IViewProductByNameUseCase ViewProductByNameUseCase;
@inject IViewProductByIdUseCase ViewProductByIdUseCase;
@inject IProduceProductUseCase ProduceProductUseCase;

@inject IJSRuntime JSRuntime


<h3>ProduceProduct</h3>


<EditForm id="produce-form" Model="produceViewModel" OnValidSubmit="Produce">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po"> Production Number #</label>
        <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Select Product to Produce"
                                       SearchFunction="SearchProduct"
                                       OnItemSeleted="OnItemSeleted">
                </AutoCompleteComponent>
                <input type="hidden" value="@produceViewModel.ProductId" />
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty"> Quantity to Produce #</label>
        <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Produce</button>
</EditForm>


@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product? selectedProduct = null;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmittion", "produce-form");
        }
    }

    public async Task<List<ItemViewModel>>? SearchProduct(string name)
    {
        var list = await ViewProductByNameUseCase.ExecuteAsync(name);
        if (list == null) return null;

        return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
    }

    private async Task OnItemSeleted(ItemViewModel item)
    {
        this.selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);
        produceViewModel.ProductId = item.Id;
        this.produceViewModel.Product = this.selectedProduct;
    }


    private async Task Produce()
    {
        await ProduceProductUseCase.ExecuteAsync(
             this.produceViewModel.ProductionNumber,
             this.selectedProduct,
             this.produceViewModel.QuantityToProduce,
             "Paul"
         );

        this.produceViewModel = new ProduceViewModel();
        this.selectedProduct = null;
    }
}
