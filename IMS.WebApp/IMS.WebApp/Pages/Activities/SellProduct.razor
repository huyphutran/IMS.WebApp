@page "/sell"
@using static IMS.WebApp.Controls.Common.AutoCompleteComponent;
@inject IViewProductByNameUseCase ViewProductByNameUseCase;
@inject IViewProductByIdUseCase ViewProductByIdUseCase;
@inject ISellProductUseCase SellProductUseCase;
@inject IJSRuntime JSRuntime;


<h3>SellProduct</h3>

<EditForm id="sell-form" Model="sellViewModel" OnValidSubmit="Sell">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po"> Purchase Order #</label>
        <InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Product to Sell"
                                       SearchFunction="SearchProduct"
                                       OnItemSeleted="OnItemSeleted">
                </AutoCompleteComponent>
                <input type="hidden" value="@sellViewModel.ProductId" />
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty"> Quantity #</label>
        <InputNumber id="qty" @bind-Value="sellViewModel.ProductQuantityToSell" class="form-control"></InputNumber>
    </div>
    <br />

    <div class="form-group">
        <label for="qty"> Unit Price #</label>
        <InputNumber id="qty" @bind-Value="sellViewModel.UnitPrice" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Sell</button>
</EditForm>

@code {
    private SellViewModel sellViewModel = new SellViewModel();
    private Product? selectedProduct = null;
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("PreventFormSubmittion", "sell-form");
        }
    }

    public async Task<List<ItemViewModel>>? SearchProduct(string name)
    {
        var list = await ViewProductByNameUseCase.ExecuteAsync(name);
        if (list == null) return null;

        return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
    }
    private async Task OnItemSeleted(ItemViewModel item)
    {
        this.selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);
        this.sellViewModel.ProductId = item.Id;
        this.sellViewModel.Product = this.selectedProduct;
        this.sellViewModel.UnitPrice = this.selectedProduct.Price;
    }

    private async Task Sell()
    {
        await this.SellProductUseCase.ExecuteAsync(
            this.sellViewModel.SalesOrderNumber,
            this.sellViewModel.Product,
            this.sellViewModel.ProductQuantityToSell,
            this.sellViewModel.UnitPrice,
            "Paul"
        );
        this.sellViewModel = new SellViewModel();
        this.selectedProduct = null;
    }

}
